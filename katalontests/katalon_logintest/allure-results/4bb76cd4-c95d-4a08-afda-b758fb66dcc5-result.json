{"name": "test_katalon_login_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=124.0.6367.201)\nStacktrace:\n0   chromedriver                        0x0000000100f7e998 chromedriver + 4368792\n1   chromedriver                        0x0000000100f76e2c chromedriver + 4337196\n2   chromedriver                        0x0000000100b9aa68 chromedriver + 289384\n3   chromedriver                        0x0000000100bd7c40 chromedriver + 539712\n4   chromedriver                        0x0000000100bd65c8 chromedriver + 533960\n5   chromedriver                        0x0000000100bd3368 chromedriver + 521064\n6   chromedriver                        0x0000000100c155ec chromedriver + 792044\n7   chromedriver                        0x0000000100bd1ab4 chromedriver + 514740\n8   chromedriver                        0x0000000100bd250c chromedriver + 517388\n9   chromedriver                        0x0000000100f42eb4 chromedriver + 4124340\n10  chromedriver                        0x0000000100f47ca4 chromedriver + 4144292\n11  chromedriver                        0x0000000100f2887c chromedriver + 4016252\n12  chromedriver                        0x0000000100f485d4 chromedriver + 4146644\n13  chromedriver                        0x0000000100f1a330 chromedriver + 3957552\n14  chromedriver                        0x0000000100f67f1c chromedriver + 4275996\n15  chromedriver                        0x0000000100f68098 chromedriver + 4276376\n16  chromedriver                        0x0000000100f76a8c chromedriver + 4336268\n17  libsystem_pthread.dylib             0x000000019cb6ef94 _pthread_start + 136\n18  libsystem_pthread.dylib             0x000000019cb69d34 thread_start + 8", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6bdf7c1332cc3a46afb0a4b3f3ff7aef\")>\n\n    @allure.epic(\"katalon Login Test\")\n    @allure.feature(\"TC#1 - VWO App Positive Test\")\n    @pytest.mark.positive\n    def test_katalon_login_positive(setup):\n        driver = setup\n        katalonloginpage = LoginPage(driver)\n        katalonloginpage.login_to_katalon(usr=\"John Doe\",pwd=\"ThisIsNotAPassword\")\n        time.sleep(5)\n    \n        allure.attach(driver.get_screenshot_as_png(), name=\" Login-Screenshot\", attachment_type=AttachmentType.PNG)\n        # wait = WebDriverWait(driver,timeout=20)\n        # wait.until(EC.alert_is_present())\n        # alert = driver.switch_to.alert\n        # alert.accept()\n        time.sleep(2)\n>       katalonloginpage.fill_appointment_details_katalog(dmy=\"5/8/2022\", text=\"your appointment is confirmed\", finaltxt=\"I need an appointment for above date\")\n\ntest_katalon_login.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pageObjects/katalonloginpage.py:99: in fill_appointment_details_katalog\n    self.get_result_msg().send_keys(finaltxt)\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10505de50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...00019cb6ef94 _pthread_start + 136\\\\n18  libsystem_pthread.dylib             0x000000019cb69d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=124.0.6367.201)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100f7e998 chromedriver + 4368792\nE       1   chromedriver                        0x0000000100f76e2c chromedriver + 4337196\nE       2   chromedriver                        0x0000000100b9aa68 chromedriver + 289384\nE       3   chromedriver                        0x0000000100bd7c40 chromedriver + 539712\nE       4   chromedriver                        0x0000000100bd65c8 chromedriver + 533960\nE       5   chromedriver                        0x0000000100bd3368 chromedriver + 521064\nE       6   chromedriver                        0x0000000100c155ec chromedriver + 792044\nE       7   chromedriver                        0x0000000100bd1ab4 chromedriver + 514740\nE       8   chromedriver                        0x0000000100bd250c chromedriver + 517388\nE       9   chromedriver                        0x0000000100f42eb4 chromedriver + 4124340\nE       10  chromedriver                        0x0000000100f47ca4 chromedriver + 4144292\nE       11  chromedriver                        0x0000000100f2887c chromedriver + 4016252\nE       12  chromedriver                        0x0000000100f485d4 chromedriver + 4146644\nE       13  chromedriver                        0x0000000100f1a330 chromedriver + 3957552\nE       14  chromedriver                        0x0000000100f67f1c chromedriver + 4275996\nE       15  chromedriver                        0x0000000100f68098 chromedriver + 4276376\nE       16  chromedriver                        0x0000000100f76a8c chromedriver + 4336268\nE       17  libsystem_pthread.dylib             0x000000019cb6ef94 _pthread_start + 136\nE       18  libsystem_pthread.dylib             0x000000019cb69d34 thread_start + 8\n\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": " Login-Screenshot", "source": "e192c04c-f488-47f0-9d01-f6062bedf370-attachment.png", "type": "image/png"}], "start": 1715606534610, "stop": 1715606543407, "uuid": "ae2cd89b-4f7a-46e5-9337-0a5affa93517", "historyId": "925732dc0ae8b660a1cffaedba05a663", "testCaseId": "925732dc0ae8b660a1cffaedba05a663", "fullName": "katalontests.katalon_logintest.test_katalon_login#test_katalon_login_positive", "labels": [{"name": "feature", "value": "TC#1 - VWO App Positive Test"}, {"name": "epic", "value": "katalon Login Test"}, {"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "katalontests.katalon_logintest"}, {"name": "suite", "value": "test_katalon_login"}, {"name": "host", "value": "Aravinds-Mac-mini.local"}, {"name": "thread", "value": "3102-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "katalontests.katalon_logintest.test_katalon_login"}]}